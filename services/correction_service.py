"""
OpenAI Correction Assistant service for message corrections.
"""

import logging
import asyncio
from openai import AsyncOpenAI
from typing import Optional

from config import Config

logger = logging.getLogger(__name__)

class CorrectionService:
    """Service for interacting with OpenAI Correction Assistant."""

    def __init__(self):
        """Initialize the Correction service."""
        self.client = AsyncOpenAI(api_key=Config.OPENAI_API_KEY)
        self.correction_assistant_id = Config.CORRECTION_ASSISTANT_ID

        if not self.correction_assistant_id:
            logger.warning("‚ö†Ô∏è CORRECTION_ASSISTANT_ID not configured in environment")

    async def create_thread(self) -> Optional[str]:
        """
        Create a new conversation thread for correction processing.

        Returns:
            Thread ID if successful, None otherwise
        """
        try:
            thread = await self.client.beta.threads.create()
            logger.info(f"‚úÖ Correction thread created: {thread.id}")
            return thread.id
        except Exception as e:
            logger.error(f"‚ùå Error creating correction thread: {e}")
            return None

    async def send_correction_message(self, thread_id: str, message: str) -> Optional[str]:
        """
        Send a correction message to the assistant and get response.

        Args:
            thread_id: The conversation thread ID
            message: The correction prompt message

        Returns:
            Assistant's corrected response if successful, None otherwise
        """
        try:
            logger.info("üì§ SENDING TO CORRECTION ASSISTANT:")
            logger.info(f"   üí¨ Message length: {len(message)} chars")
            logger.info(f"   üìÑ Correction prompt preview (first 300 chars):")
            logger.info(f"   {message[:300]}{'...' if len(message) > 300 else ''}")
            logger.info("   " + "="*80)

            # Add message to thread
            await self.client.beta.threads.messages.create(
                thread_id=thread_id,
                role="user",
                content=message
            )

            # Create and run correction assistant
            run = await self.client.beta.threads.runs.create(
                thread_id=thread_id,
                assistant_id=self.correction_assistant_id
            )

            # Wait for completion with polling interval
            logger.info(f"   ‚è≥ Waiting for correction assistant response (run_id: {run.id})")
            poll_count = 0
            while run.status in ['queued', 'in_progress', 'cancelling']:
                poll_count += 1
                logger.info(f"   üí§ Sleep 5 seconds before status check #{poll_count} (current status: {run.status})")
                await asyncio.sleep(5)

                run = await self.client.beta.threads.runs.retrieve(
                    thread_id=thread_id,
                    run_id=run.id
                )
                logger.info(f"   üìä Status check #{poll_count}: {run.status}")

                if run.status == 'completed':
                    logger.info(f"   ‚úÖ Correction assistant completed after {poll_count} checks (~{poll_count * 5} seconds)")
                    break
                elif run.status in ['cancelled', 'expired', 'failed']:
                    logger.error(f"‚ùå Correction run failed with status: {run.status}")
                    return None

            # Get assistant's response
            messages = await self.client.beta.threads.messages.list(thread_id=thread_id)

            if messages.data:
                # Get the latest assistant message
                for message in messages.data:
                    if message.role == "assistant":
                        if message.content and message.content[0].type == "text":
                            response = message.content[0].text.value

                            logger.info("üì• RECEIVED FROM CORRECTION ASSISTANT:")
                            logger.info(f"   üí¨ Corrected response length: {len(response)} chars")
                            logger.info(f"   üìÑ Corrected response preview (first 300 chars):")
                            logger.info(f"   {response[:300]}{'...' if len(response) > 300 else ''}")
                            logger.info("   " + "="*80)

                            return response

            logger.warning("‚ùå No response from correction assistant")
            return None

        except Exception as e:
            logger.error(f"‚ùå Error sending message to correction assistant: {e}")
            return None

    async def correct_message(self, original_text: str, correction_request: str) -> Optional[str]:
        """
        Correct a message using the OpenAI Correction Assistant.

        Args:
            original_text: The original AI response text to be corrected
            correction_request: The correction instructions from the moderator

        Returns:
            Corrected text if successful, None otherwise
        """
        if not self.correction_assistant_id:
            logger.error("‚ùå Correction Assistant not configured (CORRECTION_ASSISTANT_ID missing)")
            return None

        logger.info("üîß Correction Processing:")
        logger.info(f"   üìù Original text length: {len(original_text)} chars")
        logger.info(f"   üìù Correction request length: {len(correction_request)} chars")
        logger.info(f"   üìÑ Original text preview (first 200 chars):")
        logger.info(f"   {original_text[:200]}{'...' if len(original_text) > 200 else ''}")
        logger.info(f"   üìÑ Correction request preview (first 200 chars):")
        logger.info(f"   {correction_request[:200]}{'...' if len(correction_request) > 200 else ''}")
        logger.info(f"   üÜî Correction Assistant ID: {self.correction_assistant_id}")

        # Create a new thread for each correction (stateless approach)
        logger.info("   üßµ Creating new correction thread...")
        thread_id = await self.create_thread()
        if not thread_id:
            logger.error("   ‚ùå Failed to create correction thread")
            return None

        # Format the correction prompt
        correction_prompt = self._format_correction_prompt(original_text, correction_request)

        logger.info(f"   ‚úÖ Thread created: {thread_id}")
        logger.info(f"   üìÑ Formatted prompt length: {len(correction_prompt)} chars")

        # Send correction request and get response
        corrected_response = await self.send_correction_message(thread_id, correction_prompt)

        if corrected_response:
            logger.info("üéâ Correction Assistant Final Response:")
            logger.info(f"   üìä Final corrected response length: {len(corrected_response)} chars")
            logger.info(f"   üìÑ Final corrected response preview (first 300 chars):")
            logger.info(f"   {corrected_response[:300]}{'...' if len(corrected_response) > 300 else ''}")
            if len(corrected_response) > 300:
                logger.info(f"   üìÑ Final corrected response end (last 200 chars):")
                logger.info(f"   ...{corrected_response[-200:]}")
        else:
            logger.error("   ‚ùå No corrected response received from Correction Assistant")

        return corrected_response

    def _format_correction_prompt(self, original_text: str, correction_request: str) -> str:
        """
        Format the correction prompt for the OpenAI Correction Assistant.

        Args:
            original_text: The original AI response text
            correction_request: The correction instructions from moderator

        Returns:
            Formatted prompt string
        """
        correction_prompt = f"""–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º.

–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢:
{original_text}

–ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò –û–¢ –ú–û–î–ï–†–ê–¢–û–†–ê:
{correction_request}

–ó–ê–î–ê–ß–ê:
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º:
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
- –ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω

–í–µ—Ä–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""

        logger.debug(f"üîß Formatted correction prompt ({len(correction_prompt)} chars):")
        logger.debug(f"   First 200 chars: {correction_prompt[:200]}...")

        return correction_prompt