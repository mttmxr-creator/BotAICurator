#!/usr/bin/env python3
"""
Admin Telegram bot for moderation and administrative functions.
"""

import logging
import asyncio
import time
from datetime import datetime
from zoneinfo import ZoneInfo
from typing import Dict, List, Optional
from telegram.ext import Application, MessageHandler, CommandHandler, CallbackQueryHandler, filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from openai import AsyncOpenAI
import re

from config import Config
from services.moderation_service import get_moderation_queue, ModerationQueue
from services.correction_service import CorrectionService
from services.whisper_service import get_whisper_service

def escape_markdown_v2(text: str) -> str:
    """
    Escape special characters for Telegram MarkdownV2.

    MarkdownV2 requires escaping these characters:
    _ * [ ] ( ) ~ ` > # + - = | { } . !
    """
    if not text:
        return ""

    # List of characters that need to be escaped in MarkdownV2
    escape_chars = r'_*[]()~`>#+-=|{}.!'

    # Escape each special character with backslash
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', str(text))

def get_moscow_time() -> str:
    """Get current time in Moscow timezone (MSK)."""
    try:
        moscow_tz = ZoneInfo("Europe/Moscow")
        moscow_time = datetime.now(moscow_tz)
        return moscow_time.strftime("%H:%M MSK")
    except Exception:
        # Fallback to UTC if Moscow timezone not available
        return datetime.utcnow().strftime("%H:%M UTC")

# Configure detailed logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

class AdminHandlers:
    """Admin message and command handlers."""

    def __init__(self, moderation_queue: ModerationQueue, bot_application, admin_bot=None):
        """Initialize admin handlers."""
        self.moderation_queue = moderation_queue
        self.bot_application = bot_application
        self.admin_bot = admin_bot  # Reference to AdminBot for multi-admin synchronization

        # State management for corrections
        self.correction_states: Dict[int, Dict] = {}  # user_id -> {message_id, step}

        # OpenAI client for Whisper transcription
        self.openai_client = AsyncOpenAI(api_key=Config.OPENAI_API_KEY) if Config.OPENAI_API_KEY else None

        # Correction service for message corrections
        self.correction_service = CorrectionService()

        # Whisper service for voice message transcription
        self.whisper_service = get_whisper_service()

        logger.info("üîß Admin handlers initialized")

    def create_moderation_keyboard(self, message_id: str) -> InlineKeyboardMarkup:
        """
        Create inline keyboard for moderation actions.

        Args:
            message_id: The message ID for callback data

        Returns:
            InlineKeyboardMarkup with moderation buttons
        """
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_{message_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message_id}")
            ],
            [
                InlineKeyboardButton("ü§ñ –ò–ò-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_{message_id}"),
                InlineKeyboardButton("‚úçÔ∏è –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"manual_edit_{message_id}")
            ],
            [
                InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_{message_id}"),
                InlineKeyboardButton("üìñ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"show_full_{message_id}")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle the /start command for admin bot."""
        admin_welcome = (
            "üîß –ê–¥–º–∏–Ω-–±–æ—Ç –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/pending - —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
            "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
            "/notification_off - –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "/notification_on - –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        )

        try:
            await update.message.reply_text(admin_welcome)
            logger.info(f"üöÄ Admin start command handled for user {update.message.from_user.id}")
        except Exception as e:
            logger.error(f"‚ùå Error handling admin start command: {e}")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show detailed moderation statistics."""
        try:
            # Check if user is authorized admin
            if not Config.is_admin(update.effective_user.id):
                await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            # Gather comprehensive statistics
            stats = self.moderation_queue.get_statistics()
            pending_messages = self.moderation_queue.get_pending_messages()

            # Basic counts
            pending_count = stats['pending']
            approved_count = stats['approved']
            rejected_count = stats['rejected']

            # Count in-progress items (being edited)
            in_progress_count = 0
            in_progress_details = []

            for msg_id, message in pending_messages.items():
                if message.is_locked():
                    in_progress_count += 1
                    admin_name = message.admin_name or "Unknown"
                    in_progress_details.append((msg_id, admin_name))

            # Calculate totals and percentages
            total_processed = approved_count + rejected_count
            approval_percentage = (approved_count / total_processed * 100) if total_processed > 0 else 0

            # Build main statistics display
            status_message = (
                "üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
                f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_count - in_progress_count}\n"
                f"‚úçÔ∏è –í —Ä–∞–±–æ—Ç–µ: {in_progress_count}"
            )

            # Add admin names for in-progress items
            if in_progress_details:
                admin_names = [f"@{admin}" for _, admin in in_progress_details]
                status_message += f" ({', '.join(admin_names)})"

            status_message += (
                f"\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {approved_count}\n"
                f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_count}\n"
                f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}\n"
                f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {approval_percentage:.1f}%\n"
            )

            # Add detailed message list
            if pending_messages or in_progress_details:
                status_message += "\n–î–µ—Ç–∞–ª–∏:\n"
                counter = 1

                # Show in-progress items first
                for msg_id, admin_name in in_progress_details:
                    status_message += f"{counter}. ID: {msg_id[:8]}... - –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç @{admin_name}\n"
                    counter += 1

                # Show pending items
                pending_only = {mid: msg for mid, msg in pending_messages.items() if not msg.is_locked()}
                for msg_id in list(pending_only.keys())[:10]:  # Limit to 10 total items
                    if counter > 15:  # Don't exceed reasonable message length
                        status_message += f"... –∏ –µ—â–µ {len(pending_only) - (counter - len(in_progress_details) - 1)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                        break
                    status_message += f"{counter}. ID: {msg_id[:8]}... - –û–∂–∏–¥–∞–µ—Ç\n"
                    counter += 1

            await update.message.reply_text(status_message)
            logger.info(f"üìä Enhanced stats command executed: pending={pending_count}, in_progress={in_progress_count}, approved={approved_count}, rejected={rejected_count}")

        except Exception as e:
            logger.error(f"‚ùå Error in enhanced status command: {e}")
            # Fallback to basic stats if enhanced version fails
            try:
                stats = self.moderation_queue.get_statistics()
                fallback_message = (
                    f"üìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–±–∞–∑–æ–≤—ã–π):\n\n"
                    f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending']}\n"
                    f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}\n"
                    f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}"
                )
                await update.message.reply_text(fallback_message)
            except Exception as fallback_error:
                logger.error(f"‚ùå Fallback stats also failed: {fallback_error}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def pending_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show pending messages with moderation buttons."""
        try:
            # Check if user is authorized admin
            if not Config.is_admin(update.effective_user.id):
                await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            pending_messages = self.moderation_queue.get_pending_messages()

            if not pending_messages:
                await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
                return

            # Send messages to ONLY the requesting admin
            requesting_admin_id = update.effective_user.id

            for msg_id, msg_data in list(pending_messages.items())[:5]:  # Show max 5 with buttons
                moscow_time = get_moscow_time()
                username = msg_data.username or "Unknown"
                text_preview = msg_data.original_message[:100] + "..." if len(msg_data.original_message) > 100 else msg_data.original_message
                ai_response_preview = msg_data.ai_response[:100] + "..." if len(msg_data.ai_response) > 100 else msg_data.ai_response

                # CRITICAL FIX: Check if message is locked and show appropriate status
                if msg_data.is_locked():
                    # Message is being edited - show lock status and no buttons
                    lock_admin_name = msg_data.admin_name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –∞–¥–º–∏–Ω–æ–º"
                    message_text = (
                        f"üîí –í –†–ê–ë–û–¢–ï - {msg_id}\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {moscow_time}\n"
                        f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è: {lock_admin_name}\n"
                        f"üí¨ –í–æ–ø—Ä–æ—Å: {text_preview}\n"
                        f"ü§ñ –û—Ç–≤–µ—Ç: {ai_response_preview}\n"
                    )
                    keyboard = None  # No buttons when locked
                else:
                    # Message is available - show normal status with buttons
                    message_text = (
                        f"üÜî ID: {msg_id}\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {moscow_time}\n"
                        f"üí¨ –í–æ–ø—Ä–æ—Å: {text_preview}\n"
                        f"ü§ñ –û—Ç–≤–µ—Ç: {ai_response_preview}\n"
                    )
                    keyboard = self.create_moderation_keyboard(msg_id)

                try:
                    sent_message = await self.bot_application.bot.send_message(
                        chat_id=requesting_admin_id,
                        text=message_text,
                        reply_markup=keyboard
                    )

                    # Store telegram message ID for synchronization
                    if self.admin_bot:
                        self.admin_bot.store_admin_message(msg_id, requesting_admin_id, sent_message.message_id)
                        logger.debug(f"üìù Stored admin message: mod_id={msg_id}, admin={requesting_admin_id}, tg_msg={sent_message.message_id}")

                except Exception as send_error:
                    logger.error(f"‚ùå Failed to send message to requesting admin {requesting_admin_id}: {send_error}")

            if len(pending_messages) > 5:
                # Send additional info message to the requesting admin only
                await update.message.reply_text(f"... –∏ –µ—â–µ {len(pending_messages) - 5} —Å–æ–æ–±—â–µ–Ω–∏–π")

            logger.info(f"üìù Pending command executed: sent {len(list(pending_messages.items())[:5])} messages to requesting admin {requesting_admin_id}")
        except Exception as e:
            logger.error(f"‚ùå Error in pending command: {e}")

    async def approve_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Approve a message by ID and send it to the user."""
        try:
            # Check if user is authorized admin
            if not Config.is_admin(update.effective_user.id):
                await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            if not context.args:
                await update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è: /approve <id>")
                return

            message_id = context.args[0]
            approved_message = self.moderation_queue.approve_message(message_id)

            if approved_message:
                # Send the approved response to the original user
                logger.info(f"üì§ –û–¢–ü–†–ê–í–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–í–ï–¢–ê: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
                logger.info(f"   üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {approved_message.username} (ID: {approved_message.user_id})")
                logger.info(f"   üí¨ –ß–∞—Ç: {approved_message.chat_id}")
                logger.info(f"   üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(approved_message.ai_response)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"   üë§ –û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º: {update.message.from_user.username or update.message.from_user.first_name}")
                try:
                    await self.bot_application.bot.send_message(
                        chat_id=approved_message.chat_id,
                        text=approved_message.ai_response
                    )
                    logger.info(f"‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢ –î–û–°–¢–ê–í–õ–ï–ù: —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {approved_message.username} —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")

                    await update.message.reply_text(
                        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {approved_message.username}"
                    )
                    logger.info(f"‚úÖ Message approved and sent: {message_id} ‚Üí user {approved_message.username}")

                except Exception as send_error:
                    logger.error(f"‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–í–ï–¢–ê: —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
                    logger.error(f"‚ùå Failed to send approved message to user: {send_error}")
                    await update.message.reply_text(
                        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ–¥–æ–±—Ä–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {send_error}"
                    )
            else:
                await update.message.reply_text(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå Error in approve command: {e}")

    async def reject_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Reject a message by ID."""
        try:
            # Check if user is authorized admin
            if not Config.is_admin(update.effective_user.id):
                await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            if not context.args:
                await update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è: /reject <id> [–ø—Ä–∏—á–∏–Ω–∞]")
                return

            message_id = context.args[0]
            reason = " ".join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

            rejected_message = self.moderation_queue.reject_message(message_id, reason)

            if rejected_message:
                await update.message.reply_text(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
                logger.info(f"‚ùå Message rejected by admin: {message_id}, reason: {reason}")
            else:
                await update.message.reply_text(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå Error in reject command: {e}")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show detailed moderation statistics."""
        try:
            # Check if user is authorized admin
            if not Config.is_admin(update.effective_user.id):
                await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            # Gather comprehensive statistics
            stats = self.moderation_queue.get_statistics()
            pending_messages = self.moderation_queue.get_pending_messages()

            # Basic counts
            pending_count = stats['pending']
            approved_count = stats['approved']
            rejected_count = stats['rejected']

            # Count in-progress items (being edited)
            in_progress_count = 0
            in_progress_details = []

            for msg_id, message in pending_messages.items():
                if message.is_locked():
                    in_progress_count += 1
                    admin_name = message.admin_name or "Unknown"
                    in_progress_details.append((msg_id, admin_name))

            # Calculate totals and percentages
            total_processed = approved_count + rejected_count
            approval_percentage = (approved_count / total_processed * 100) if total_processed > 0 else 0

            # Build main statistics display
            status_message = (
                "üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
                f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_count - in_progress_count}\n"
                f"‚úçÔ∏è –í —Ä–∞–±–æ—Ç–µ: {in_progress_count}"
            )

            # Add admin names for in-progress items
            if in_progress_details:
                admin_names = [f"@{admin}" for _, admin in in_progress_details]
                status_message += f" ({', '.join(admin_names)})"

            status_message += (
                f"\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {approved_count}\n"
                f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_count}\n"
                f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}\n"
                f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {approval_percentage:.1f}%\n"
            )

            # Add detailed message list
            if pending_messages or in_progress_details:
                status_message += "\n–î–µ—Ç–∞–ª–∏:\n"
                counter = 1

                # Show in-progress items first
                for msg_id, admin_name in in_progress_details:
                    status_message += f"{counter}. ID: {msg_id[:8]}... - –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç @{admin_name}\n"
                    counter += 1

                # Show pending items
                pending_only = {mid: msg for mid, msg in pending_messages.items() if not msg.is_locked()}
                for msg_id in list(pending_only.keys())[:10]:  # Limit to 10 total items
                    if counter > 15:  # Don't exceed reasonable message length
                        status_message += f"... –∏ –µ—â–µ {len(pending_only) - (counter - len(in_progress_details) - 1)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                        break
                    status_message += f"{counter}. ID: {msg_id[:8]}... - –û–∂–∏–¥–∞–µ—Ç\n"
                    counter += 1

            await update.message.reply_text(status_message)
            logger.info(f"üìä Enhanced stats command executed: pending={pending_count}, in_progress={in_progress_count}, approved={approved_count}, rejected={rejected_count}")

        except Exception as e:
            logger.error(f"‚ùå Error in enhanced stats command: {e}")
            # Fallback to basic stats if enhanced version fails
            try:
                stats = self.moderation_queue.get_statistics()
                fallback_message = (
                    f"üìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–±–∞–∑–æ–≤—ã–π):\n\n"
                    f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending']}\n"
                    f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}\n"
                    f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}"
                )
                await update.message.reply_text(fallback_message)
            except Exception as fallback_error:
                logger.error(f"‚ùå Fallback stats also failed: {fallback_error}")

    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Clear all pending messages from moderation queue with confirmation."""
        try:
            # Check if user is authorized admin
            if not Config.is_admin(update.effective_user.id):
                await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            # Get count before clearing
            pending_count = self.moderation_queue.get_pending_count()

            if pending_count == 0:
                await update.message.reply_text("üì≠ –û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—É—Å—Ç–∞")
                logger.info("üßπ Clear command executed: queue already empty")
                return

            # Show confirmation dialog with buttons
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup

            confirmation_text = (
                f"‚ö†Ô∏è **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–ß–ò–°–¢–ö–ò –û–ß–ï–†–ï–î–ò**\n\n"
                f"üìä –í –æ—á–µ—Ä–µ–¥–∏ —Å–µ–π—á–∞—Å: **{pending_count}** —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                f"üóëÔ∏è –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
                f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏?"
            )

            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_confirm_yes"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="clear_confirm_no")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                confirmation_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

            logger.info(f"üßπ Clear confirmation shown to admin {update.message.from_user.username or update.message.from_user.first_name} (ID: {update.effective_user.id})")

        except Exception as e:
            logger.error(f"‚ùå Error in clear command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏: {e}")

    async def notification_off_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Turn off notifications for the requesting admin."""
        try:
            # Check if user is authorized admin
            if not Config.is_admin(update.effective_user.id):
                await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            admin_user_id = update.effective_user.id

            # Disable reminders for this admin
            if self.admin_bot:
                self.admin_bot.disabled_reminders[admin_user_id] = True
                await update.message.reply_text("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤–∞—Å")
                logger.info(f"üîï Admin {admin_user_id} disabled reminders via /notification_off")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω-–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå Error in notification_off command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    async def notification_on_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Turn on notifications for the requesting admin."""
        try:
            # Check if user is authorized admin
            if not Config.is_admin(update.effective_user.id):
                await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            admin_user_id = update.effective_user.id

            # Enable reminders for this admin
            if self.admin_bot:
                self.admin_bot.disabled_reminders.pop(admin_user_id, None)
                await update.message.reply_text("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
                logger.info(f"üîî Admin {admin_user_id} enabled reminders via /notification_on")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω-–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå Error in notification_on command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    async def button_callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries from inline buttons."""
        query = update.callback_query
        await query.answer()

        try:
            callback_data = query.data
            admin_user = query.from_user

            # Check if user is authorized admin
            if not Config.is_admin(admin_user.id):
                logger.warning(f"üö´ Unauthorized callback attempt from user {admin_user.username or admin_user.first_name} (ID: {admin_user.id})")
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            logger.info(f"üîò –ê–î–ú–ò–ù –î–ï–ô–°–¢–í–ò–ï: {callback_data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {admin_user.username or admin_user.first_name} (ID: {admin_user.id})")
            logger.info(f"üîò Callback received: {callback_data}")

            # Parse callback data: action_messageId or cancel_edit_messageId
            if '_' not in callback_data:
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
                return

            # Handle special cases for multi-word actions
            if callback_data.startswith('cancel_edit_'):
                action = 'cancel_edit'
                message_id = callback_data[12:]  # Remove 'cancel_edit_' prefix
                logger.info(f"üîÑ CANCEL_EDIT parsed: callback_data='{callback_data}' ‚Üí action='{action}', message_id='{message_id}'")
            elif callback_data.startswith('manual_edit_'):
                action = 'manual_edit'
                message_id = callback_data[12:]  # Remove 'manual_edit_' prefix
                logger.info(f"üîÑ MANUAL_EDIT parsed: callback_data='{callback_data}' ‚Üí action='{action}', message_id='{message_id}'")
            elif callback_data.startswith('show_full_'):
                action = 'show_full'
                message_id = callback_data[10:]  # Remove 'show_full_' prefix
                logger.info(f"üîÑ SHOW_FULL parsed: callback_data='{callback_data}' ‚Üí action='{action}', message_id='{message_id}'")
            elif callback_data.startswith('hide_full_'):
                action = 'hide_full'
                message_id = callback_data[10:]  # Remove 'hide_full_' prefix
                logger.info(f"üîÑ HIDE_FULL parsed: callback_data='{callback_data}' ‚Üí action='{action}', message_id='{message_id}'")
            elif callback_data.startswith('return_to_manual_edit_'):
                action = 'return_to_manual_edit'
                message_id = callback_data[22:]  # Remove 'return_to_manual_edit_' prefix (22 chars)
                logger.info(f"üîÑ RETURN_TO_MANUAL_EDIT parsed: callback_data='{callback_data}' ‚Üí action='{action}', message_id='{message_id}'")
            elif callback_data.startswith('return_to_edit_'):
                action = 'return_to_edit'
                message_id = callback_data[15:]  # Remove 'return_to_edit_' prefix
                logger.info(f"üîÑ RETURN_TO_EDIT parsed: callback_data='{callback_data}' ‚Üí action='{action}', message_id='{message_id}'")
            elif callback_data.startswith('reset_question_'):
                action = 'reset_question'
                message_id = callback_data[15:]  # Remove 'reset_question_' prefix
                logger.info(f"üîÑ RESET_QUESTION parsed: callback_data='{callback_data}' ‚Üí action='{action}', message_id='{message_id}'")
            elif callback_data == 'clear_confirm_yes':
                action = 'clear_confirm_yes'
                message_id = None  # No message ID for clear confirmation
                logger.info(f"üîÑ CLEAR_CONFIRM_YES parsed: callback_data='{callback_data}' ‚Üí action='{action}'")
            elif callback_data == 'clear_confirm_no':
                action = 'clear_confirm_no'
                message_id = None  # No message ID for clear confirmation
                logger.info(f"üîÑ CLEAR_CONFIRM_NO parsed: callback_data='{callback_data}' ‚Üí action='{action}'")
            elif callback_data.startswith('copy_'):
                action = 'copy'
                message_id = callback_data[5:]  # Remove 'copy_' prefix
                logger.info(f"üîÑ COPY parsed: callback_data='{callback_data}' ‚Üí action='{action}', message_id='{message_id}'")
            else:
                action, message_id = callback_data.split('_', 1)
                logger.info(f"üîÑ REGULAR parsed: callback_data='{callback_data}' ‚Üí action='{action}', message_id='{message_id}'")

            if action == "edit":
                await self.handle_edit_callback(query, message_id)
            elif action == "manual_edit":
                await self.handle_manual_edit_callback(query, message_id)
            elif action == "copy":
                await self.handle_copy_callback(query, message_id)
            elif action == "send":
                await self.handle_send_callback(query, message_id)
            elif action == "reject":
                await self.handle_reject_callback(query, message_id)
            elif action == "cancel_edit":
                await self.handle_cancel_edit_callback(query, message_id)
            elif action == "show_full":
                await self.handle_show_full_callback(query, message_id)
            elif action == "hide_full":
                await self.handle_hide_full_callback(query, message_id)
            elif action == "return_to_manual_edit":
                await self.handle_return_to_manual_edit_callback(query, message_id)
            elif action == "return_to_edit":
                await self.handle_return_to_edit_callback(query, message_id)
            elif action == "reset_question":
                await self.handle_reset_question_callback(query, message_id)
            elif action == "clear_confirm_yes":
                await self.handle_clear_confirm_yes_callback(query)
            elif action == "clear_confirm_no":
                await self.handle_clear_confirm_no_callback(query)
            else:
                await query.edit_message_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")

        except Exception as e:
            logger.error(f"‚ùå Error in callback handler: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è")

    async def handle_edit_callback(self, query, message_id: str):
        """Handle edit button callback - set correction state."""
        try:
            admin_user_id = query.from_user.id
            admin_username = query.from_user.username or query.from_user.first_name

            logger.info(f"üîÑ EDIT_CALLBACK_START: message_id='{message_id}', admin={admin_username} (ID: {admin_user_id})")
            logger.info(f"üîÑ Current correction states: {list(self.correction_states.keys())}")

            # Check if admin already has an active correction session
            if admin_user_id in self.correction_states:
                active_msg_id = self.correction_states[admin_user_id].get('message_id')
                logger.warning(f"‚ö†Ô∏è Admin {admin_user_id} already has active correction for message {active_msg_id}")

                # Show warning about active correction session
                warning_text = (
                    f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!\n\n"
                    f"üìù –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Å–æ–æ–±—â–µ–Ω–∏–µ **{active_msg_id}**\n\n"
                    f"üîÑ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–∞–≤–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é,\n"
                    f"–∞ –∑–∞—Ç–µ–º –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ.\n\n"
                    f"üí° **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è **{active_msg_id}**\n"
                    f"‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å\" –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
                    f"‚Ä¢ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á: /pending"
                )
                await query.edit_message_text(warning_text, parse_mode='Markdown')
                return

            # Get pending messages count for debugging
            pending_count = self.moderation_queue.get_pending_count()
            logger.info(f"üìä Current pending messages count: {pending_count}")

            # Force reload queue to ensure synchronization
            self.moderation_queue._load_data()
            logger.info(f"üîÑ Queue reloaded, new pending count: {self.moderation_queue.get_pending_count()}")

            message = self.moderation_queue.get_from_queue(message_id)
            if not message:
                logger.error(f"‚ùå EDIT_CALLBACK_FAILED: message '{message_id}' not found in queue")
                await query.edit_message_text(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # Check editing lock with timeout
            if message.editing_admin_id and message.editing_admin_id != admin_user_id:
                # Check 10-minute timeout
                if time.time() - message.editing_started_at < 600:
                    await query.answer(f"‚ö†Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç @{message.editing_admin_name}")
                    return
                else:
                    # Remove expired lock
                    message.editing_admin_id = None
                    message.editing_admin_name = None
                    message.editing_started_at = None

            # Set editing lock
            message.editing_admin_id = admin_user_id
            message.editing_admin_name = admin_username
            message.editing_started_at = time.time()

            # Update all other admins' interfaces (remove buttons)
            for admin_id in Config.ADMIN_CHAT_IDS:
                if admin_id != str(admin_user_id):  # Skip the admin who is editing
                    try:
                        # Get stored message ID for this admin
                        if hasattr(self, 'admin_messages') and message_id in self.admin_messages and admin_id in self.admin_messages[message_id]:
                            telegram_msg_id = self.admin_messages[message_id][admin_id]
                            # Remove buttons from other admins
                            await self.bot_application.bot.edit_message_reply_markup(
                                chat_id=int(admin_id),
                                message_id=telegram_msg_id,
                                reply_markup=None
                            )
                    except Exception as e:
                        logger.error(f"Failed to update admin {admin_id}: {e}")

            # Send notification to ALL admins about edit start
            notification_count = 0
            moscow_time = get_moscow_time()

            for admin_id in Config.ADMIN_CHAT_IDS:
                # Skip notification to the admin who started editing (no self-notification)
                if admin_id == str(admin_user_id):
                    continue

                try:
                    edit_notification = (
                        f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n"
                        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message_id}\n"
                        f"üë§ –ê–¥–º–∏–Ω: @{admin_username}\n"
                        f"üïê –ù–∞—á–∞—Ç–æ: {moscow_time}\n"
                        f"üí¨ –í–æ–ø—Ä–æ—Å: {message.original_message[:100]}{'...' if len(message.original_message) > 100 else ''}\n\n"
                        f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                    )

                    await self.bot_application.bot.send_message(
                        chat_id=int(admin_id),
                        text=edit_notification,
                        parse_mode='Markdown'
                    )
                    notification_count += 1
                    logger.info(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")

                except Exception as e:
                    logger.error(f"‚ùå Failed to notify admin {admin_id} about edit start: {e}")

            logger.info(f"üîî EDIT_START notifications sent to {notification_count} admins")

            # Lock message for editing by this admin (keeping existing functionality)
            message.lock_for_editing(admin_user_id, admin_username)

            # Save the updated message with editing lock
            self.moderation_queue._save_data()

            # Update all admin messages to show it's being edited
            if self.admin_bot:
                await self.admin_bot.update_all_admin_messages(message_id, "edit", admin_username)
                # Start edit timeout tracking
                self.admin_bot.start_edit_timeout(message_id, admin_user_id, admin_username)

            # Set correction state for this admin user
            self.correction_states[admin_user_id] = {
                'message_id': message_id,
                'step': 'waiting_correction',
                'original_message': message
            }

            chat_title = message.chat_title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"

            edit_text = (
                f"‚úèÔ∏è –†–µ–∂–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}\n\n"
                f"üì± –ß–∞—Ç: {chat_title}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.username}\n"
                f"üí¨ –í–æ–ø—Ä–æ—Å: {message.original_message}\n\n"
                f"ü§ñ –¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç:\n{message.ai_response}\n\n"
                f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏.\n"
                f"üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —á–µ—Ä–µ–∑ Whisper."
            )

            # Create specialized editing keyboard
            keyboard = [
                [
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"cancel_edit_{message_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(edit_text, reply_markup=reply_markup)
            logger.info(f"‚úèÔ∏è –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê: —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}, –∞–¥–º–∏–Ω {query.from_user.username or query.from_user.first_name} (ID: {admin_user_id})")
            logger.info(f"‚úèÔ∏è Correction state activated for message {message_id} by admin {admin_user_id}")

        except Exception as e:
            logger.error(f"‚ùå Error in edit handler: {e}")
            logger.error(f"‚ùå Exception type: {type(e).__name__}")
            logger.error(f"‚ùå Exception details: {str(e)}")

            # Try to reload queue and provide better diagnostics
            try:
                self.moderation_queue._load_data()
                pending_count = self.moderation_queue.get_pending_count()
                pending_ids = list(self.moderation_queue.get_pending_messages().keys())
                logger.error(f"‚ùå After reload: {pending_count} pending messages, IDs: {pending_ids}")

                if message_id in pending_ids:
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
                else:
                    await query.edit_message_text(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            except Exception as reload_error:
                logger.error(f"‚ùå Failed to reload queue during error recovery: {reload_error}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    async def handle_copy_callback(self, query, message_id: str):
        """Handle copy button callback - show AI response in code block for instant copying."""
        try:
            admin_user_id = query.from_user.id
            message = self.moderation_queue.get_from_queue(message_id)
            if not message:
                await query.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return

            # Format text in code block for easy tap-to-copy in Telegram
            # Telegram allows up to 4096 characters, code block up to ~3800 characters works well
            max_copy_length = 3800
            ai_response_text = message.ai_response

            if len(ai_response_text) > max_copy_length:
                ai_response_text = ai_response_text[:max_copy_length] + "\n\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"

            copy_display = (
                f"üìã **–¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è** (ID: {message_id})\n\n"
                f"üí° *–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
                f"```\n{ai_response_text}\n```\n\n"
                f"üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ –≤—ã—à–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
            )

            # Check if user has active editing session to return to correct state
            has_editing_session = admin_user_id in self.correction_states
            editing_is_manual = has_editing_session and self.correction_states[admin_user_id].get('step') == 'waiting_manual_correction'

            # Create keyboard to return back - either to editing or to message
            if editing_is_manual:
                keyboard = [
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä—É—á–Ω–æ–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"return_to_manual_edit_{message_id}")]
                ]
            elif has_editing_session:
                keyboard = [
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ò–ò —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"return_to_edit_{message_id}")]
                ]
            else:
                keyboard = [
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", callback_data=f"hide_full_{message_id}")]
                ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(copy_display, reply_markup=reply_markup, parse_mode='Markdown')
            await query.answer("üìã –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=False)
            logger.info(f"üìã Copy callback: showed AI response for message {message_id} to admin {admin_user_id}")

        except Exception as e:
            logger.error(f"‚ùå Error in copy callback: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞", show_alert=True)

    async def handle_manual_edit_callback(self, query, message_id: str):
        """Handle manual edit button callback - allow admin to send their own corrected text."""
        try:
            admin_user_id = query.from_user.id
            admin_username = query.from_user.username or query.from_user.first_name

            logger.info(f"‚úçÔ∏è MANUAL_EDIT_START: message_id='{message_id}', admin={admin_username} (ID: {admin_user_id})")

            # Check if admin already has an active correction session
            if admin_user_id in self.correction_states:
                active_msg_id = self.correction_states[admin_user_id].get('message_id')
                logger.warning(f"‚ö†Ô∏è Admin {admin_user_id} already has active correction for message {active_msg_id}")

                warning_text = (
                    f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!\n\n"
                    f"üìù –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Å–æ–æ–±—â–µ–Ω–∏–µ **{active_msg_id}**\n\n"
                    f"üîÑ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–∞–≤–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é,\n"
                    f"–∞ –∑–∞—Ç–µ–º –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ.\n\n"
                    f"üí° **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è **{active_msg_id}**\n"
                    f"‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å\" –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
                    f"‚Ä¢ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á: /pending"
                )
                await query.edit_message_text(warning_text, parse_mode='Markdown')
                return

            # Get message from queue
            message = self.moderation_queue.get_from_queue(message_id)
            if not message:
                logger.error(f"‚ùå MANUAL_EDIT_FAILED: message '{message_id}' not found in queue")
                await query.edit_message_text(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # Check editing lock with timeout
            if message.editing_admin_id and message.editing_admin_id != admin_user_id:
                if time.time() - message.editing_started_at < 600:
                    await query.answer(f"‚ö†Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç @{message.editing_admin_name}")
                    return
                else:
                    # Remove expired lock
                    message.editing_admin_id = None
                    message.editing_admin_name = None
                    message.editing_started_at = None

            # Set editing lock
            message.editing_admin_id = admin_user_id
            message.editing_admin_name = admin_username
            message.editing_started_at = time.time()

            # Lock message for manual editing
            message.lock_for_editing(admin_user_id, admin_username)
            self.moderation_queue._save_data()

            # Update all other admins' interfaces (remove buttons)
            for admin_id in Config.ADMIN_CHAT_IDS:
                if admin_id != str(admin_user_id):  # Skip the admin who is editing
                    try:
                        # Get stored message ID for this admin
                        if hasattr(self, 'admin_messages') and message_id in self.admin_messages and admin_id in self.admin_messages[message_id]:
                            telegram_msg_id = self.admin_messages[message_id][admin_id]
                            # Remove buttons from other admins
                            await self.bot_application.bot.edit_message_reply_markup(
                                chat_id=int(admin_id),
                                message_id=telegram_msg_id,
                                reply_markup=None
                            )
                    except Exception as e:
                        logger.error(f"Failed to update admin {admin_id}: {e}")

            # Send notification to ALL admins about manual edit start
            notification_count = 0
            moscow_time = get_moscow_time()

            for admin_id in Config.ADMIN_CHAT_IDS:
                # Skip notification to the admin who started editing (no self-notification)
                if admin_id == str(admin_user_id):
                    continue

                try:
                    edit_notification = (
                        f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n"
                        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message_id}\n"
                        f"üë§ –ê–¥–º–∏–Ω: @{admin_username}\n"
                        f"üïê –ù–∞—á–∞—Ç–æ: {moscow_time}\n"
                        f"üí¨ –í–æ–ø—Ä–æ—Å: {message.original_message[:100]}{'...' if len(message.original_message) > 100 else ''}\n\n"
                        f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                    )

                    await self.bot_application.bot.send_message(
                        chat_id=int(admin_id),
                        text=edit_notification,
                        parse_mode='Markdown'
                    )
                    notification_count += 1
                    logger.info(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")

                except Exception as e:
                    logger.error(f"‚ùå Failed to notify admin {admin_id} about manual edit start: {e}")

            logger.info(f"üîî MANUAL_EDIT_START notifications sent to {notification_count} admins")

            # Update all admin messages to show it's being edited
            if self.admin_bot:
                await self.admin_bot.update_all_admin_messages(message_id, "manual_edit", admin_username)
                # Start edit timeout tracking
                self.admin_bot.start_edit_timeout(message_id, admin_user_id, admin_username)

            # Set correction state for manual editing
            self.correction_states[admin_user_id] = {
                'message_id': message_id,
                'step': 'waiting_manual_correction',  # Different step for manual editing
                'original_message': message
            }

            chat_title = message.chat_title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"

            edit_text = (
                f"‚úçÔ∏è **–†–µ–∂–∏–º —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω** –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}\n\n"
                f"üì± –ß–∞—Ç: {chat_title}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.username}\n"
                f"üí¨ –í–æ–ø—Ä–æ—Å: {message.original_message}\n\n"
                f"ü§ñ –¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –ò–ò:\n{message.ai_response}\n\n"
                f"üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç** –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
                f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ –ø—Ä–µ–≤—å—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é:\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–∏—Ç—å\n\n"
                f"üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ò–ò"
            )

            # Create keyboard with copy and cancel buttons
            keyboard = [
                [
                    InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ò–ò", callback_data=f"copy_{message_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_edit_{message_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(edit_text, reply_markup=reply_markup, parse_mode='Markdown')
            logger.info(f"‚úçÔ∏è Manual edit activated for message {message_id} by admin {admin_user_id}")

        except Exception as e:
            logger.error(f"‚ùå Error in manual edit handler: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    async def handle_send_callback(self, query, message_id: str):
        """Handle send button callback - approve and send message to user."""
        try:
            message = self.moderation_queue.get_from_queue(message_id)
            if not message:
                await query.edit_message_text(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # Check if message is locked by another admin
            if message.is_locked() and message.admin_processing != query.from_user.id:
                admin_name = message.admin_name or "–¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º"
                await query.edit_message_text(
                    f"üîí –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è {admin_name}"
                )
                return

            # Lock message for processing
            admin_username = query.from_user.username or query.from_user.first_name
            message.lock_for_editing(query.from_user.id, admin_username)

            # Approve the message
            approved_message = self.moderation_queue.approve_message(message_id)

            if approved_message:
                # Send the approved response to the original user
                logger.info(f"üì§ –û–¢–ü–†–ê–í–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–í–ï–¢–ê: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
                logger.info(f"   üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {approved_message.username} (ID: {approved_message.user_id})")
                logger.info(f"   üí¨ –ß–∞—Ç: {approved_message.chat_id}")
                logger.info(f"   üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(approved_message.ai_response)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"   üë§ –û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º: {admin_username}")
                try:
                    # Use bot messenger service to queue message for main bot
                    from services.bot_communication import get_bot_messenger
                    bot_messenger = get_bot_messenger(use_redis=False)

                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {approved_message.chat_id}")
                    logger.info(f"üìù –¢–µ–∫—Å—Ç: {approved_message.ai_response[:50]}{'...' if len(approved_message.ai_response) > 50 else ''}")

                    # Queue message for main bot to send
                    message_queue_id = await bot_messenger.send_final_response(
                        chat_id=approved_message.chat_id,
                        user_id=approved_message.user_id,
                        text=approved_message.ai_response,
                        original_message_id=approved_message.original_message_id,
                        metadata={
                            'moderation_id': message_id,
                            'approved_by': admin_username,
                            'username': approved_message.username
                        }
                    )

                    logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: —É—Å–ø–µ—Ö (–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å {message_queue_id})")
                    logger.info(f"‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢ –î–û–ë–ê–í–õ–ï–ù –í –û–ß–ï–†–ï–î–¨: —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {approved_message.username}")
                    logger.info(f"‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û: ID {message_id} ‚Üí –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {approved_message.username}, –∞–¥–º–∏–Ω {admin_username}")
                    logger.info(f"‚úÖ Message approved and sent via button: {message_id} ‚Üí user {approved_message.username}")

                    # Send notification to ALL admins about message approval
                    notification_count = 0
                    moscow_time = get_moscow_time()

                    for admin_id in Config.ADMIN_CHAT_IDS:
                        # Skip notification to the admin who sent the message (no self-notification)
                        if admin_id == str(query.from_user.id):
                            continue

                        try:
                            # Safely truncate and escape user message to prevent Markdown parsing errors
                            safe_message = approved_message.original_message[:100]
                            if len(approved_message.original_message) > 100:
                                safe_message += '...'
                            safe_message = escape_markdown_v2(safe_message)

                            send_notification = (
                                f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
                                f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {escape_markdown_v2(message_id)}\n"
                                f"üë§ –ê–¥–º–∏–Ω: @{escape_markdown_v2(admin_username)}\n"
                                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {escape_markdown_v2(approved_message.username)}\n"
                                f"üïê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {moscow_time}\n"
                                f"üí¨ –í–æ–ø—Ä–æ—Å: {safe_message}\n\n"
                                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                            )

                            await self.bot_application.bot.send_message(
                                chat_id=int(admin_id),
                                text=send_notification,
                                parse_mode='MarkdownV2'
                            )
                            notification_count += 1
                            logger.info(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")

                        except Exception as e:
                            logger.error(f"‚ùå Failed to notify admin {admin_id} about message send: {e}")

                    logger.info(f"üîî SEND notifications sent to {notification_count} admins")

                    # CRITICAL FIX: Clear all locks after successful send
                    if message:
                        # Clear System 1: admin_bot level locks
                        message.editing_admin_id = None
                        message.editing_admin_name = None
                        message.editing_started_at = None

                        # Clear System 2: moderation_service level locks
                        if message.is_locked():
                            message.unlock_editing()

                        # Save the changes
                        self.moderation_queue._save_data()
                        logger.info(f"üîì All locks cleared after successful send of {message_id}")

                    # Update all admin messages to show success
                    if self.admin_bot:
                        await self.admin_bot.update_all_admin_messages(message_id, "send", admin_username)

                except Exception as send_error:
                    logger.error(f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: –æ—à–∏–±–∫–∞ ({send_error})")
                    logger.error(f"‚ùå –û–®–ò–ë–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –û–ß–ï–†–ï–î–¨: —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
                    logger.error(f"‚ùå Failed to queue approved message: {send_error}")

                    # CRITICAL FIX: Clear locks even on send error to prevent persistence
                    if message:
                        # Clear System 1: admin_bot level locks
                        message.editing_admin_id = None
                        message.editing_admin_name = None
                        message.editing_started_at = None

                        # Clear System 2: moderation_service level locks
                        if message.is_locked():
                            message.unlock_editing()

                        # Save the changes
                        self.moderation_queue._save_data()
                        logger.info(f"üîì Locks cleared after send error for {message_id}")

                    # Update all admin messages with error status
                    if self.admin_bot:
                        await self.admin_bot.update_all_admin_messages(message_id, "send_error", admin_username)
            else:
                # Update all admin messages with error status
                if self.admin_bot:
                    await self.admin_bot.update_all_admin_messages(message_id, "send_error", admin_username)

        except Exception as e:
            logger.error(f"‚ùå Error in send handler: {e}")
            # If we have admin_bot reference and message was locked, update all admin messages
            if hasattr(self, 'admin_bot') and self.admin_bot:
                admin_username = query.from_user.username or query.from_user.first_name
                await self.admin_bot.update_all_admin_messages(message_id, "send_error", admin_username)

    async def handle_reject_callback(self, query, message_id: str):
        """Handle reject button callback."""
        try:
            message = self.moderation_queue.get_from_queue(message_id)
            if not message:
                await query.edit_message_text(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # Check if message is locked by another admin
            if message.is_locked() and message.admin_processing != query.from_user.id:
                admin_name = message.admin_name or "–¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º"
                await query.edit_message_text(
                    f"üîí –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è {admin_name}"
                )
                return

            # Lock message for processing
            admin_username = query.from_user.username or query.from_user.first_name
            message.lock_for_editing(query.from_user.id, admin_username)

            rejected_message = self.moderation_queue.reject_message(message_id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")

            if rejected_message:
                logger.info(f"‚ùå –°–û–û–ë–©–ï–ù–ò–ï –û–¢–ö–õ–û–ù–ï–ù–û: ID {message_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {rejected_message.username}, –∞–¥–º–∏–Ω {admin_username}")
                logger.info(f"‚ùå Message rejected via button: {message_id}")

                # Send notification to ALL admins about message rejection
                notification_count = 0
                moscow_time = get_moscow_time()

                for admin_id in Config.ADMIN_CHAT_IDS:
                    # Skip notification to the admin who performed the action (no self-notification)
                    if admin_id == str(query.from_user.id):
                        continue
                    try:
                        # Safely truncate and escape user message to prevent Markdown parsing errors
                        safe_message = rejected_message.original_message[:100]
                        if len(rejected_message.original_message) > 100:
                            safe_message += '...'
                        safe_message = escape_markdown_v2(safe_message)

                        reject_notification = (
                            f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"
                            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {escape_markdown_v2(message_id)}\n"
                            f"üë§ –ê–¥–º–∏–Ω: @{escape_markdown_v2(admin_username)}\n"
                            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {escape_markdown_v2(rejected_message.username)}\n"
                            f"üïê –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {moscow_time}\n"
                            f"üí¨ –í–æ–ø—Ä–æ—Å: {safe_message}\n\n"
                            f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                        )

                        await self.bot_application.bot.send_message(
                            chat_id=int(admin_id),
                            text=reject_notification,
                            parse_mode='MarkdownV2'
                        )
                        notification_count += 1
                        logger.info(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")

                    except Exception as e:
                        logger.error(f"‚ùå Failed to notify admin {admin_id} about message rejection: {e}")

                logger.info(f"üîî REJECT notifications sent to {notification_count} admins")

                # Update all admin messages to show rejection
                if self.admin_bot:
                    await self.admin_bot.update_all_admin_messages(message_id, "reject", admin_username)
            else:
                # Update all admin messages with error status
                if self.admin_bot:
                    await self.admin_bot.update_all_admin_messages(message_id, "reject_error", admin_username)

        except Exception as e:
            logger.error(f"‚ùå Error in reject handler: {e}")
            # If we have admin_bot reference, update all admin messages with error
            if hasattr(self, 'admin_bot') and self.admin_bot:
                admin_username = query.from_user.username or query.from_user.first_name
                await self.admin_bot.update_all_admin_messages(message_id, "reject_error", admin_username)


    async def handle_cancel_edit_callback(self, query, message_id: str):
        """Handle cancel edit button callback."""
        try:
            admin_user_id = query.from_user.id
            admin_username = query.from_user.username or query.from_user.first_name

            logger.info(f"‚ùå CANCEL_EDIT_START: message_id='{message_id}', admin={admin_username} (ID: {admin_user_id})")
            logger.info(f"‚ùå Current correction states before cleanup: {list(self.correction_states.keys())}")

            # Remove correction state if exists
            if admin_user_id in self.correction_states:
                active_msg_id = self.correction_states[admin_user_id].get('message_id')
                logger.info(f"üóëÔ∏è Clearing correction state: admin {admin_user_id}, active message {active_msg_id}")
                del self.correction_states[admin_user_id]
                logger.info(f"‚úÖ Correction cancelled via button for message {message_id} by admin {admin_user_id}")
            else:
                logger.warning(f"‚ö†Ô∏è No active correction state found for admin {admin_user_id}")

            logger.info(f"‚ùå Correction states after cleanup: {list(self.correction_states.keys())}")

            # Force reload queue to ensure synchronization
            self.moderation_queue._load_data()
            logger.info(f"üîÑ Queue reloaded for cancel edit")

            # Show original message with main keyboard
            message = self.moderation_queue.get_from_queue(message_id)
            if not message:
                logger.error(f"‚ùå CANCEL_EDIT_FAILED: message '{message_id}' not found in queue")
                await query.edit_message_text(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # CRITICAL FIX: Clear BOTH locking systems and always notify all admins
            lock_was_active = False
            current_admin_name = admin_username

            # Clear System 1: admin_bot level locks
            if message.editing_admin_id == admin_user_id:
                current_admin_name = message.editing_admin_name or admin_username
                message.editing_admin_id = None
                message.editing_admin_name = None
                message.editing_started_at = None
                lock_was_active = True
                logger.info(f"üîì System 1 lock cleared (admin_bot level)")

            # Clear System 2: moderation_service level locks
            if message.is_locked() and message.admin_processing == admin_user_id:
                message.unlock_editing()  # This clears admin_processing, admin_name, and status
                lock_was_active = True
                logger.info(f"üîì System 2 lock cleared (moderation_service level)")

            # Force save after clearing both lock systems
            self.moderation_queue._save_data()
            logger.info(f"üîì All editing locks cleared for message {message_id}")

            # ALWAYS send notifications to ALL admins (not conditional)
            notification_count = 0
            for admin_id in Config.ADMIN_CHAT_IDS:
                # Skip notification to the admin who performed the action (no self-notification)
                if admin_id == str(admin_user_id):
                    continue
                try:
                    # Get stored message ID for this admin
                    if hasattr(self, 'admin_messages') and message_id in self.admin_messages and admin_id in self.admin_messages[message_id]:
                        telegram_msg_id = self.admin_messages[message_id][admin_id]
                        # Restore standard moderation keyboard
                        keyboard = self.create_moderation_keyboard(message_id)
                        await self.bot_application.bot.edit_message_reply_markup(
                            chat_id=int(admin_id),
                            message_id=telegram_msg_id,
                            reply_markup=keyboard
                        )
                        logger.debug(f"‚úÖ Restored buttons for admin {admin_id}")

                    # Send notification to ALL admins
                    await self.bot_application.bot.send_message(
                        chat_id=int(admin_id),
                        text=f"‚úÖ @{current_admin_name} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {message_id}. –°–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
                    )
                    notification_count += 1
                    logger.debug(f"‚úÖ Sent cancel notification to admin {admin_id}")
                except Exception as e:
                    logger.error(f"‚ùå Failed to notify admin {admin_id}: {e}")

            logger.info(f"üì¢ Cancel notifications sent to {notification_count}/{len(Config.ADMIN_CHAT_IDS)} admins")

            chat_title = message.chat_title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"

            cancel_text = (
                f"‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}\n\n"
                f"üì± –ß–∞—Ç: {chat_title}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.username}\n"
                f"üí¨ –í–æ–ø—Ä–æ—Å: {message.original_message[:200]}...\n\n"
                f"ü§ñ –û—Ç–≤–µ—Ç:\n{message.ai_response[:300]}..."
            )

            # Show main moderation keyboard
            keyboard = self.create_moderation_keyboard(message_id)
            await query.edit_message_text(cancel_text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"‚ùå Error in cancel edit handler: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    async def handle_show_full_callback(self, query, message_id: str):
        """Handle show full message button callback."""
        try:
            admin_user_id = query.from_user.id
            admin_username = query.from_user.username or query.from_user.first_name

            logger.info(f"üìñ SHOW_FULL_START: message_id='{message_id}', admin={admin_username} (ID: {admin_user_id})")

            # Force reload queue to ensure synchronization
            self.moderation_queue._load_data()
            logger.info(f"üîÑ Queue reloaded for show full message")

            # Get message from queue
            message = self.moderation_queue.get_from_queue(message_id)
            if not message:
                logger.error(f"‚ùå SHOW_FULL_FAILED: message '{message_id}' not found in queue")
                await query.edit_message_text(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            moscow_time = get_moscow_time()
            username = message.username or "Unknown"
            chat_title = message.chat_title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"

            # Create full message display (with length limits for Telegram)
            max_length = 3500  # Safe limit for Telegram messages

            full_text = (
                f"üìñ –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: {message_id})\n\n"
                f"üì± –ß–∞—Ç: {chat_title}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"‚è∞ –í—Ä–µ–º—è: {moscow_time}\n\n"
                f"üí¨ –í–û–ü–†–û–°:\n{message.original_message}\n\n"
                f"ü§ñ –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ –ò–ò:\n{message.ai_response}"
            )

            # Truncate if too long for Telegram
            if len(full_text) > max_length:
                truncate_at = max_length - 200  # Leave space for truncation message
                full_text = full_text[:truncate_at] + "\n\n‚ö†Ô∏è (–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram)"

            # Create keyboard with ALL moderation actions and hide button
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_{message_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message_id}")
                ],
                [
                    InlineKeyboardButton("ü§ñ –ò–ò-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_{message_id}"),
                    InlineKeyboardButton("‚úçÔ∏è –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"manual_edit_{message_id}")
                ],
                [
                    InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_{message_id}"),
                    InlineKeyboardButton("üîô –°–∫—Ä—ã—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"hide_full_{message_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(full_text, reply_markup=reply_markup)

            logger.info(f"üìñ Show full message completed for {message_id}")

        except Exception as e:
            logger.error(f"‚ùå Error in show full message handler: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

    async def handle_hide_full_callback(self, query, message_id: str):
        """Handle hide full message button callback - return to compact format."""
        try:
            admin_user_id = query.from_user.id
            admin_username = query.from_user.username or query.from_user.first_name

            logger.info(f"üîô HIDE_FULL_START: message_id='{message_id}', admin={admin_username} (ID: {admin_user_id})")

            # Force reload queue to ensure synchronization
            self.moderation_queue._load_data()
            logger.info(f"üîÑ Queue reloaded for hide full message")

            # Get message from queue
            message = self.moderation_queue.get_from_queue(message_id)
            if not message:
                logger.error(f"‚ùå HIDE_FULL_FAILED: message '{message_id}' not found in queue")
                await query.edit_message_text(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # Create compact format (like in pending_command)
            moscow_time = get_moscow_time()
            username = message.username or "Unknown"
            chat_title = message.chat_title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            text_preview = message.original_message[:100] + "..." if len(message.original_message) > 100 else message.original_message
            ai_response_preview = message.ai_response[:100] + "..." if len(message.ai_response) > 100 else message.ai_response

            compact_text = (
                f"üÜî ID: {message_id}\n"
                f"üì± –ß–∞—Ç: {chat_title}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"‚è∞ –í—Ä–µ–º—è: {moscow_time}\n"
                f"üí¨ –í–æ–ø—Ä–æ—Å: {text_preview}\n"
                f"ü§ñ –û—Ç–≤–µ—Ç: {ai_response_preview}"
            )

            # Create keyboard with ALL moderation actions and show full button
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_{message_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message_id}")
                ],
                [
                    InlineKeyboardButton("ü§ñ –ò–ò-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_{message_id}"),
                    InlineKeyboardButton("‚úçÔ∏è –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"manual_edit_{message_id}")
                ],
                [
                    InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_{message_id}"),
                    InlineKeyboardButton("üìñ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"show_full_{message_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(compact_text, reply_markup=reply_markup)

            logger.info(f"üîô Hide full message completed for {message_id}")

        except Exception as e:
            logger.error(f"‚ùå Error in hide full message handler: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

    async def handle_reset_question_callback(self, query, message_id: str):
        """Handle reset question button callback - save changes and release for other admins."""
        try:
            admin_user_id = query.from_user.id
            admin_username = query.from_user.username or query.from_user.first_name

            logger.info(f"üîÑ RESET_QUESTION_START: message_id='{message_id}', admin={admin_username} (ID: {admin_user_id})")

            # Force reload queue to ensure synchronization
            self.moderation_queue._load_data()
            logger.info(f"üîÑ Queue reloaded for reset question")

            # Get message from queue
            message = self.moderation_queue.get_from_queue(message_id)
            if not message:
                logger.error(f"‚ùå RESET_QUESTION_FAILED: message '{message_id}' not found in queue")
                await query.edit_message_text(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # Check if current admin is the one who has the lock
            if message.is_locked() and message.admin_processing != admin_user_id:
                admin_name = message.admin_name or "–¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º"
                await query.edit_message_text(
                    f"üîí –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è {admin_name}"
                )
                return

            # CRITICAL: The corrected message is ALREADY saved in moderation queue
            # (this happens in the correction processing flow before this callback)
            # So we just need to unlock the message and notify admins

            # 1. Clear all locks and states for this message
            message.unlock_editing()  # Clear moderation_service level lock

            # Clear admin_bot level locks if present
            if message.editing_admin_id == admin_user_id:
                message.editing_admin_id = None
                message.editing_admin_name = None
                message.editing_started_at = None

            # 2. Clear timeout tracking
            if self.admin_bot:
                self.admin_bot.clear_edit_timeout(message_id)
                logger.info(f"‚è∞ Cleared edit timeout for reset question: {message_id}")

            # 3. Clear correction state for this admin
            if admin_user_id in self.correction_states:
                del self.correction_states[admin_user_id]
                logger.info(f"üßπ Cleared correction state for admin {admin_user_id}")

            # 4. Save the updated message state
            self.moderation_queue._save_data()

            # 5. Send notification to ALL admins about reset
            notification_count = 0
            moscow_time = get_moscow_time()

            for admin_id in Config.ADMIN_CHAT_IDS:
                # Skip notification to the admin who performed the action (no self-notification)
                if admin_id == str(admin_user_id):
                    continue
                try:
                    reset_notification = (
                        f"üîÑ **–°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏** {moscow_time}\n\n"
                        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message_id}\n"
                        f"üë§ –û—Å–≤–æ–±–æ–¥–∏–ª: @{admin_username}\n"
                        f"üí¨ –í–æ–ø—Ä–æ—Å: {message.original_message[:100]}{'...' if len(message.original_message) > 100 else ''}\n\n"
                        f"‚ú® **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏**\n"
                        f"üîì –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
                    )

                    await self.bot_application.bot.send_message(
                        chat_id=int(admin_id),
                        text=reset_notification,
                        parse_mode='Markdown'
                    )
                    notification_count += 1
                    logger.info(f"üîî Reset notification sent to admin {admin_id}")

                except Exception as e:
                    logger.error(f"‚ùå Failed to notify admin {admin_id} about reset: {e}")

            logger.info(f"üîî RESET notifications sent to {notification_count} admins")

            # 6. Update current admin's interface to show success
            reset_success_text = (
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ {moscow_time}\n\n"
                f"üìù ID: {message_id}\n"
                f"üíæ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n"
                f"üîì –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ\n"
                f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º\n\n"
                f"‚ÑπÔ∏è –î—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å"
            )

            await query.edit_message_text(reset_success_text)

            # 7. Clean up old admin messages to avoid UI confusion
            if self.admin_bot:
                # Delete old admin messages from chat to clean up interface
                await self.admin_bot.delete_admin_messages_from_chat(message_id)
                # Note: New messages will be sent automatically when someone queries /pending

            logger.info(f"üîÑ QUESTION RESET COMPLETED: message {message_id} by admin {admin_username}")

        except Exception as e:
            logger.error(f"‚ùå Error in reset question handler: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≤–æ–ø—Ä–æ—Å–∞")

    async def handle_clear_confirm_yes_callback(self, query):
        """Handle clear confirmation YES button callback - execute the clear operation."""
        try:
            admin_user_id = query.from_user.id
            admin_username = query.from_user.username or query.from_user.first_name

            logger.info(f"üßπ CLEAR_CONFIRM_YES: admin={admin_username} (ID: {admin_user_id})")

            # Check admin authorization
            if not Config.is_admin(admin_user_id):
                await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            # Get count before clearing for confirmation message
            pending_count = self.moderation_queue.get_pending_count()

            if pending_count == 0:
                await query.edit_message_text("üì≠ –û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—É—Å—Ç–∞")
                logger.info("üßπ Clear confirmed but queue already empty")
                return

            # Execute the clear operation
            cleared_count = self.moderation_queue.clear_all_pending()

            # Clear all active editing sessions
            sessions_cleared = len(self.correction_states)
            self.correction_states.clear()

            moscow_time = get_moscow_time()

            # Show success message
            success_text = (
                f"‚úÖ **–û–ß–ï–†–ï–î–¨ –ú–û–î–ï–†–ê–¶–ò–ò –û–ß–ò–©–ï–ù–ê** {moscow_time}\n\n"
                f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: **{cleared_count}**\n"
                f"üßπ –û—á–∏—â–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: **{sessions_cleared}**\n"
                f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª: @{admin_username}\n\n"
                f"üì≠ –û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞"
            )

            await query.edit_message_text(success_text, parse_mode='Markdown')

            # Send notification to ALL other admins about clear operation
            notification_count = 0
            for admin_id in Config.ADMIN_CHAT_IDS:
                # Skip notification to the admin who performed the action (no self-notification)
                if admin_id == str(admin_user_id):
                    continue
                try:
                    clear_notification = (
                        f"üßπ **–û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω–∞** {moscow_time}\n\n"
                        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: **{cleared_count}** —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                        f"üßπ –û—á–∏—â–µ–Ω–æ —Å–µ—Å—Å–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: **{sessions_cleared}**\n"
                        f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª: @{admin_username}\n\n"
                        f"üì≠ –û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞"
                    )

                    await self.bot_application.bot.send_message(
                        chat_id=int(admin_id),
                        text=clear_notification,
                        parse_mode='Markdown'
                    )
                    notification_count += 1
                    logger.info(f"üîî Clear notification sent to admin {admin_id}")

                except Exception as e:
                    logger.error(f"‚ùå Failed to notify admin {admin_id} about clear: {e}")

            logger.info(f"üßπ CLEAR COMPLETED: {cleared_count} messages removed by admin {admin_username}")
            logger.info(f"üîî Clear notifications sent to {notification_count} admins")

        except Exception as e:
            logger.error(f"‚ùå Error in clear confirm yes handler: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")

    async def handle_clear_confirm_no_callback(self, query):
        """Handle clear confirmation NO button callback - cancel the clear operation."""
        try:
            admin_user_id = query.from_user.id
            admin_username = query.from_user.username or query.from_user.first_name
            moscow_time = get_moscow_time()

            logger.info(f"üö´ CLEAR_CONFIRM_NO: admin={admin_username} (ID: {admin_user_id})")

            # Show cancellation message
            cancel_text = (
                f"‚ùå **–û–ß–ò–°–¢–ö–ê –û–ß–ï–†–ï–î–ò –û–¢–ú–ï–ù–ï–ù–ê** {moscow_time}\n\n"
                f"üë§ –û—Ç–º–µ–Ω–∏–ª: @{admin_username}\n"
                f"üìã –û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n"
                f"‚ÑπÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pending"
            )

            await query.edit_message_text(cancel_text, parse_mode='Markdown')

            logger.info(f"üö´ Clear operation cancelled by admin {admin_username}")

        except Exception as e:
            logger.error(f"‚ùå Error in clear confirm no handler: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")


    async def process_with_correction_assistant(self, original_response: str, correction_text: str) -> Optional[str]:
        """Process correction using the correction service."""
        try:
            logger.info("üîß Processing correction with CorrectionService...")

            # Use the dedicated correction service
            corrected_response = await self.correction_service.correct_message(
                original_text=original_response,
                correction_request=correction_text
            )

            if corrected_response:
                logger.info(f"‚ú® Correction completed: {corrected_response[:100]}...")
            else:
                logger.warning("‚ùå No corrected response received")

            return corrected_response

        except Exception as e:
            logger.error(f"‚ùå Error processing correction: {e}")
            return None

    async def process_correction(self, admin_user_id: int, correction_text: str, update: Update):
        """Process the correction input from admin."""
        try:
            if admin_user_id not in self.correction_states:
                await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏")
                return

            correction_state = self.correction_states[admin_user_id]
            message_id = correction_state['message_id']
            original_message = correction_state['original_message']

            # Show processing message
            processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ Correction Assistant...")

            # Process with correction assistant
            corrected_response = await self.process_with_correction_assistant(
                original_response=original_message.ai_response,
                correction_text=correction_text
            )

            if corrected_response:
                # Update the message in moderation queue
                message = self.moderation_queue.get_from_queue(message_id)
                if message:
                    message.ai_response = corrected_response
                    # Save the updated message to persistent storage
                    self.moderation_queue._save_data()
                    logger.info(f"üíæ Updated message {message_id} saved to moderation queue")

                # Create keyboard for final decision
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π", callback_data=f"send_{message_id}"),
                        InlineKeyboardButton("‚úèÔ∏è –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ", callback_data=f"edit_{message_id}")
                    ],
                    [
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message_id}")
                    ],
                    [
                        InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"reset_question_{message_id}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                correction_result = (
                    f"‚ú® –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}\n\n"
                    f"üìù –í–∞—à–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:\n{correction_text}\n\n"
                    f"ü§ñ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{corrected_response[:1000]}{'...' if len(corrected_response) > 1000 else ''}"
                )

                await processing_msg.edit_text(correction_result, reply_markup=reply_markup)
                logger.info(f"‚ú® Correction completed for message {message_id}")

                # Clear correction state
                del self.correction_states[admin_user_id]

                # CRITICAL FIX: Clear edit timeout after correction completion
                # Without this, timeout continues and message auto-unlocks in 10 minutes
                if self.admin_bot:
                    self.admin_bot.clear_edit_timeout(message_id)
                    logger.info(f"‚è∞ Cleared edit timeout for completed correction: {message_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è Could not clear edit timeout - admin_bot reference not available")

            else:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ Correction Assistant")

        except Exception as e:
            logger.error(f"‚ùå Error processing correction: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏")

    async def process_manual_correction(self, admin_user_id: int, correction_text: str, update: Update):
        """Process manual correction input from admin (direct text replacement without AI)."""
        try:
            if admin_user_id not in self.correction_states:
                await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏")
                return

            correction_state = self.correction_states[admin_user_id]
            message_id = correction_state['message_id']
            original_message = correction_state['original_message']

            logger.info(f"‚úçÔ∏è MANUAL_CORRECTION processing for message {message_id}")
            logger.info(f"   üìè Original length: {len(original_message.ai_response)} chars")
            logger.info(f"   üìè New length: {len(correction_text)} chars")

            # Update the message in moderation queue with manual correction
            message = self.moderation_queue.get_from_queue(message_id)
            if message:
                message.ai_response = correction_text
                # Save the updated message to persistent storage
                self.moderation_queue._save_data()
                logger.info(f"üíæ Updated message {message_id} with manual correction saved to queue")

            # Create comprehensive keyboard with all options (as per requirements)
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_{message_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message_id}")
                ],
                [
                    InlineKeyboardButton("ü§ñ –ò–ò-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_{message_id}"),
                    InlineKeyboardButton("‚úçÔ∏è –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"manual_edit_{message_id}")
                ],
                [
                    InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_{message_id}"),
                    InlineKeyboardButton("üìñ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"show_full_{message_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            chat_title = message.chat_title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"

            correction_result = (
                f"‚úÖ **–†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ** –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}\n\n"
                f"üì± –ß–∞—Ç: {chat_title}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.username}\n"
                f"üí¨ –í–æ–ø—Ä–æ—Å: {message.original_message}\n\n"
                f"üìù **–í–∞—à –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n{correction_text[:1000]}{'...' if len(correction_text) > 1000 else ''}\n\n"
                f"üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ò–ò –∏–ª–∏ —Ä—É—á–Ω–æ–µ)\n"
                f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )

            await update.message.reply_text(correction_result, reply_markup=reply_markup, parse_mode='Markdown')
            logger.info(f"‚úçÔ∏è Manual correction completed for message {message_id}")

            # Clear correction state
            del self.correction_states[admin_user_id]

            # Clear edit timeout after correction completion
            if self.admin_bot:
                self.admin_bot.clear_edit_timeout(message_id)
                logger.info(f"‚è∞ Cleared edit timeout for completed manual correction: {message_id}")
            else:
                logger.warning(f"‚ö†Ô∏è Could not clear edit timeout - admin_bot reference not available")

        except Exception as e:
            logger.error(f"‚ùå Error processing manual correction: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä—É—á–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏")

    async def handle_return_to_manual_edit_callback(self, query, message_id: str):
        """Return from copy to manual editing mode."""
        try:
            admin_user_id = query.from_user.id
            message = self.moderation_queue.get_from_queue(message_id)
            if not message:
                await query.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return

            chat_title = message.chat_title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"

            edit_text = (
                f"‚úçÔ∏è **–†–µ–∂–∏–º —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω** –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}\n\n"
                f"üì± –ß–∞—Ç: {chat_title}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.username}\n"
                f"üí¨ –í–æ–ø—Ä–æ—Å: {message.original_message}\n\n"
                f"ü§ñ –¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –ò–ò:\n{message.ai_response}\n\n"
                f"üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç** –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
                f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ –ø—Ä–µ–≤—å—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é:\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–∏—Ç—å\n\n"
                f"üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ò–ò"
            )

            keyboard = [
                [
                    InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ò–ò", callback_data=f"copy_{message_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_edit_{message_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(edit_text, reply_markup=reply_markup, parse_mode='Markdown')
            await query.answer("‚úçÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä—É—á–Ω–æ–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", show_alert=False)
            logger.info(f"üîô Returned to manual edit mode for message {message_id}")

        except Exception as e:
            logger.error(f"‚ùå Error returning to manual edit: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", show_alert=True)

    async def handle_return_to_edit_callback(self, query, message_id: str):
        """Return from copy to AI editing mode."""
        try:
            admin_user_id = query.from_user.id
            message = self.moderation_queue.get_from_queue(message_id)
            if not message:
                await query.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return

            chat_title = message.chat_title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"

            edit_text = (
                f"‚úèÔ∏è –†–µ–∂–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}\n\n"
                f"üì± –ß–∞—Ç: {chat_title}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.username}\n"
                f"üí¨ –í–æ–ø—Ä–æ—Å: {message.original_message}\n\n"
                f"ü§ñ –¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç:\n{message.ai_response}\n\n"
                f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏.\n"
                f"üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —á–µ—Ä–µ–∑ Whisper."
            )

            keyboard = [
                [
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"cancel_edit_{message_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(edit_text, reply_markup=reply_markup)
            await query.answer("‚úèÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ –ò–ò —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", show_alert=False)
            logger.info(f"üîô Returned to AI edit mode for message {message_id}")

        except Exception as e:
            logger.error(f"‚ùå Error returning to AI edit: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", show_alert=True)

    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle voice messages for corrections using WhisperService."""
        try:
            admin_user_id = update.message.from_user.id

            # Check if user is in correction state
            if admin_user_id not in self.correction_states:
                return  # Not in correction mode, ignore

            if not update.message.voice:
                return

            logger.info(f"üé§ Processing voice message from admin {admin_user_id}")

            # Show processing message
            processing_msg = await update.message.reply_text("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Whisper...")

            try:
                # Transcribe voice message using WhisperService
                transcribed_text = await self.whisper_service.transcribe_voice(
                    voice_file=update.message.voice,
                    bot_context=context,
                    language='ru'
                )

                if transcribed_text and transcribed_text.strip():
                    logger.info(f"‚úÖ Voice transcribed successfully: {transcribed_text[:100]}...")

                    # Show transcription result to admin
                    await processing_msg.edit_text(
                        f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {transcribed_text}\n\n"
                        f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞–∫ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É..."
                    )

                    # Process the transcribed text as regular correction
                    await self.process_correction(admin_user_id, transcribed_text, update)

                else:
                    logger.warning(f"‚ùå Voice transcription failed or returned empty text")
                    await processing_msg.edit_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                    )

            except Exception as transcription_error:
                logger.error(f"‚ùå Voice transcription error: {transcription_error}")
                await processing_msg.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É."
                )

        except Exception as e:
            logger.error(f"‚ùå Error handling voice message: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

    async def admin_message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle general messages to admin bot."""
        if not update.message or not update.message.text:
            return

        admin_user_id = update.message.from_user.id
        message_text = update.message.text.strip()

        logger.info(f"üí¨ Admin message received from {admin_user_id}: {message_text[:100]}")

        # Check if admin is in correction state
        if admin_user_id in self.correction_states:
            correction_state = self.correction_states[admin_user_id]

            # Handle cancel command
            if message_text.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
                message_id = correction_state['message_id']
                del self.correction_states[admin_user_id]
                await update.message.reply_text(f"‚ùå –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
                logger.info(f"‚ùå Correction cancelled for message {message_id} by admin {admin_user_id}")
                return

            # Process text as AI-powered correction
            if correction_state['step'] == 'waiting_correction':
                await self.process_correction(admin_user_id, message_text, update)
                return

            # Process text as manual correction (direct text replacement)
            if correction_state['step'] == 'waiting_manual_correction':
                await self.process_manual_correction(admin_user_id, message_text, update)
                return


        # For regular messages not in correction state
        await update.message.reply_text("üìù –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π.")


    @staticmethod
    async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle errors in admin bot."""
        logger.error(f"‚ùå Admin bot error: {context.error}")

class AdminBot:
    """Main admin bot class."""

    def __init__(self, moderation_queue: Optional[ModerationQueue] = None):
        """Initialize the admin bot."""
        try:
            # Validate admin configuration
            Config.validate_admin_config()
            logger.info("‚úÖ Admin configuration validated successfully")
        except ValueError as e:
            logger.error(f"‚ùå Admin configuration validation failed: {e}")
            raise

        self.application = Application.builder().token(Config.ADMIN_BOT_TOKEN).build()

        # Use provided moderation queue or get singleton instance
        if moderation_queue is not None:
            self.moderation_queue = moderation_queue
            logger.info("üîó Using provided moderation queue instance")
        else:
            self.moderation_queue = get_moderation_queue()
            logger.info("üîó Using singleton moderation queue instance")

        # Link this admin bot instance to the moderation queue for notifications
        self.moderation_queue.set_admin_bot(self)
        logger.info("üîó Admin bot linked to moderation queue for notifications")

        # Admin message tracking for multi-admin synchronization
        # Format: admin_messages[message_id] = {admin_id_1: telegram_message_id_1, admin_id_2: telegram_message_id_2, ...}
        self.admin_messages: Dict[str, Dict[int, int]] = {}

        # Reminder settings for individual admins
        # Format: disabled_reminders[admin_id] = True (if reminders disabled)
        self.disabled_reminders: Dict[int, bool] = {}

        # Edit timeout tracking system
        # Format: edit_timeouts[message_id] = {'admin_id': int, 'admin_name': str, 'start_time': datetime}
        from datetime import datetime
        from typing import Dict, Optional
        self.edit_timeouts: Dict[str, Dict] = {}
        self.edit_timeout_duration = 600  # 10 minutes in seconds
        self.timeout_monitor_task: Optional[asyncio.Task] = None
        self.editing_timeout_task: Optional[asyncio.Task] = None

        self.setup_handlers()

    def setup_handlers(self):
        """Set up admin bot handlers."""
        # Initialize admin handlers
        self.admin_handlers = AdminHandlers(self.moderation_queue, self.application, self)

        # Command handlers
        self.application.add_handler(
            CommandHandler("start", self.admin_handlers.start_command)
        )
        self.application.add_handler(
            CommandHandler("status", self.admin_handlers.status_command)
        )
        self.application.add_handler(
            CommandHandler("pending", self.admin_handlers.pending_command)
        )
        self.application.add_handler(
            CommandHandler("approve", self.admin_handlers.approve_command)
        )
        self.application.add_handler(
            CommandHandler("reject", self.admin_handlers.reject_command)
        )
        self.application.add_handler(
            CommandHandler("stats", self.admin_handlers.stats_command)
        )
        self.application.add_handler(
            CommandHandler("clear", self.admin_handlers.clear_command)
        )

        self.application.add_handler(
            CommandHandler("notification_off", self.admin_handlers.notification_off_command)
        )
        self.application.add_handler(
            CommandHandler("notification_on", self.admin_handlers.notification_on_command)
        )
        # Callback query handler for inline buttons
        self.application.add_handler(
            CallbackQueryHandler(self.admin_handlers.button_callback_handler)
        )

        # General message handler
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.admin_handlers.admin_message_handler)
        )

        # Voice message handler for corrections
        self.application.add_handler(
            MessageHandler(filters.VOICE, self.admin_handlers.handle_voice_message)
        )

        # Error handler
        self.application.add_error_handler(AdminHandlers.error_handler)

        logger.info("üîß Admin handlers configured successfully")

    def get_moderation_queue(self) -> ModerationQueue:
        """Get access to moderation queue."""
        return self.moderation_queue

    async def notify_admin(self, message: str):
        """Send notification to all admin chats."""
        try:
            if Config.ADMIN_CHAT_IDS:
                for admin_id in Config.ADMIN_CHAT_IDS:
                    await self.application.bot.send_message(
                        chat_id=int(admin_id),
                        text=f"üîî {message}"
                    )
                logger.info(f"üîî Admin notification sent to {len(Config.ADMIN_CHAT_IDS)} admins: {message[:50]}...")
        except Exception as e:
            logger.error(f"‚ùå Failed to send admin notification: {e}")

    def store_admin_message(self, message_id: str, admin_id: int, telegram_message_id: int):
        """Store telegram message ID for admin message tracking."""
        if message_id not in self.admin_messages:
            self.admin_messages[message_id] = {}
        self.admin_messages[message_id][admin_id] = telegram_message_id
        logger.debug(f"üìù Stored admin message: mod_id={message_id}, admin={admin_id}, tg_msg={telegram_message_id}")

    def cleanup_admin_message(self, message_id: str):
        """Remove admin message tracking data after message is processed."""
        if message_id in self.admin_messages:
            del self.admin_messages[message_id]
            logger.debug(f"üóëÔ∏è Cleaned up admin message tracking for: {message_id}")

    async def delete_admin_messages_from_chat(self, message_id: str):
        """Delete all admin messages from Telegram chat to avoid UI confusion."""
        try:
            if message_id not in self.admin_messages:
                logger.debug(f"üóëÔ∏è No admin messages to delete for: {message_id}")
                return 0

            admin_message_ids = self.admin_messages[message_id]
            deleted_count = 0
            failed_count = 0

            logger.info(f"üóëÔ∏è Deleting {len(admin_message_ids)} admin messages for {message_id}")

            for admin_id, telegram_message_id in admin_message_ids.items():
                try:
                    await self.application.bot.delete_message(
                        chat_id=admin_id,
                        message_id=telegram_message_id
                    )
                    deleted_count += 1
                    logger.debug(f"‚úÖ Deleted message {telegram_message_id} from admin {admin_id}")

                except Exception as delete_error:
                    failed_count += 1
                    # Don't log as error - message might already be deleted
                    logger.debug(f"‚ö†Ô∏è Could not delete message {telegram_message_id} from admin {admin_id}: {delete_error}")

            logger.info(f"üóëÔ∏è Message deletion results: {deleted_count} deleted, {failed_count} failed")
            return deleted_count

        except Exception as e:
            logger.error(f"‚ùå Error in delete_admin_messages_from_chat: {e}")
            return 0

    async def sync_message_status(self, message_id: str, new_status: str, admin_name: str):
        """
        Synchronize message status across all admin interfaces with enhanced button handling.

        Args:
            message_id: Moderation message ID
            new_status: Status action ('send', 'reject', 'edit')
            admin_name: Name of admin who performed the action
        """
        try:
            if message_id not in self.admin_messages:
                logger.warning(f"‚ö†Ô∏è No admin messages tracked for {message_id}")
                return

            admin_message_ids = self.admin_messages[message_id]
            logger.info(f"üîÑ Syncing status '{new_status}' for {len(admin_message_ids)} admin messages")

            # Define status-specific text and button behavior
            if new_status == "send":
                status_text = f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º @{admin_name}"
                reply_markup = None  # Remove buttons completely
            elif new_status == "reject":
                status_text = f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º @{admin_name}"
                reply_markup = None  # Remove buttons completely
            elif new_status == "edit":
                status_text = f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º @{admin_name}"
                reply_markup = None  # Remove buttons completely
            else:
                logger.warning(f"‚ö†Ô∏è Unknown status: {new_status}")
                return

            # Update all admin messages
            successful_updates = 0
            for admin_id, telegram_message_id in admin_message_ids.items():
                try:
                    await self.application.bot.edit_message_text(
                        chat_id=admin_id,
                        message_id=telegram_message_id,
                        text=status_text,
                        reply_markup=reply_markup
                    )
                    successful_updates += 1
                    logger.debug(f"‚úÖ Updated admin {admin_id} message {telegram_message_id}")

                except Exception as update_error:
                    logger.error(f"‚ùå Failed to update admin {admin_id} message {telegram_message_id}: {update_error}")

            logger.info(f"‚úÖ Successfully updated {successful_updates}/{len(admin_message_ids)} admin messages")

            # Clean up tracking for completed actions (send/reject)
            if new_status in ["send", "reject"]:
                # Delete actual messages from chat to avoid UI confusion
                await self.delete_admin_messages_from_chat(message_id)
                # Then clean up tracking data
                self.cleanup_admin_message(message_id)

        except Exception as e:
            logger.error(f"‚ùå Error in sync_message_status: {e}")

    def start_edit_timeout(self, message_id: str, admin_id: int, admin_name: str):
        """Start timeout tracking for an edit operation."""
        from datetime import datetime
        self.edit_timeouts[message_id] = {
            'admin_id': admin_id,
            'admin_name': admin_name,
            'start_time': datetime.now()
        }
        logger.info(f"‚è∞ Started edit timeout for message {message_id} by admin {admin_name}")

    def clear_edit_timeout(self, message_id: str):
        """Clear timeout tracking for a message."""
        if message_id in self.edit_timeouts:
            del self.edit_timeouts[message_id]
            logger.debug(f"‚è∞ Cleared edit timeout for message {message_id}")

    async def check_edit_timeouts(self):
        """Check for expired edit timeouts and auto-unlock messages."""
        from datetime import datetime, timedelta

        current_time = datetime.now()
        expired_messages = []

        # Find expired timeouts
        for message_id, timeout_info in self.edit_timeouts.items():
            start_time = timeout_info['start_time']
            elapsed_seconds = (current_time - start_time).total_seconds()

            if elapsed_seconds >= self.edit_timeout_duration:
                expired_messages.append((message_id, timeout_info))

        # Process expired timeouts
        for message_id, timeout_info in expired_messages:
            await self.handle_edit_timeout_expiry(message_id, timeout_info)

    async def handle_edit_timeout_expiry(self, message_id: str, timeout_info: Dict):
        """Handle timeout expiry for an edit operation."""
        try:
            admin_id = timeout_info['admin_id']
            admin_name = timeout_info['admin_name']

            logger.warning(f"‚è∞ Edit timeout expired for message {message_id} (admin: {admin_name})")

            # 1. Get the message and unlock it
            message = self.moderation_queue.get_from_queue(message_id)
            if message and message.is_locked():
                message.unlock()
                logger.info(f"üîì Auto-unlocked message {message_id} after timeout")

            # 2. Clear correction state for the admin
            if admin_id in self.admin_handlers.correction_states:
                del self.admin_handlers.correction_states[admin_id]
                logger.info(f"üßπ Cleared correction state for admin {admin_id}")

            # 3. Restore admin interface buttons with timeout notification
            await self.restore_admin_interface_after_timeout(message_id, admin_name)

            # 4. Clear timeout tracking
            self.clear_edit_timeout(message_id)

        except Exception as e:
            logger.error(f"‚ùå Error handling edit timeout expiry: {e}")

    async def restore_admin_interface_after_timeout(self, message_id: str, admin_name: str):
        """Restore admin interface buttons after edit timeout expiry."""
        try:
            if message_id not in self.admin_messages:
                logger.warning(f"‚ö†Ô∏è No admin messages tracked for {message_id} during timeout expiry")
                return

            admin_message_ids = self.admin_messages[message_id]
            timeout_text = f"‚è∞ –¢–∞–π–º–∞—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ\n\n" \
                          f"–ê–¥–º–∏–Ω @{admin_name} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç."

            # Get original message for re-creating buttons
            message = self.moderation_queue.get_from_queue(message_id)
            if not message:
                logger.error(f"‚ùå Cannot restore interface: message {message_id} not found")
                return

            # Create original moderation keyboard
            keyboard = self.admin_handlers.create_moderation_keyboard(message_id)

            # Update all admin messages to restore functionality
            successful_updates = 0
            for admin_id, telegram_message_id in admin_message_ids.items():
                try:
                    await self.application.bot.edit_message_text(
                        chat_id=admin_id,
                        message_id=telegram_message_id,
                        text=timeout_text,
                        reply_markup=keyboard
                    )
                    successful_updates += 1
                    logger.debug(f"‚úÖ Restored admin {admin_id} interface after timeout")

                except Exception as update_error:
                    logger.error(f"‚ùå Failed to restore admin {admin_id} interface: {update_error}")

            logger.info(f"‚úÖ Restored {successful_updates}/{len(admin_message_ids)} admin interfaces after timeout")

        except Exception as e:
            logger.error(f"‚ùå Error restoring admin interface after timeout: {e}")

    async def start_timeout_monitor(self):
        """Start the background task for monitoring edit timeouts."""
        if self.timeout_monitor_task is not None:
            logger.warning("‚ö†Ô∏è Timeout monitor already running")
            return

        self.timeout_monitor_task = asyncio.create_task(self.timeout_monitor_loop())
        logger.info("‚è∞ Edit timeout monitor started")

    async def stop_timeout_monitor(self):
        """Stop the timeout monitoring task."""
        if self.timeout_monitor_task is not None:
            self.timeout_monitor_task.cancel()
            try:
                await self.timeout_monitor_task
            except asyncio.CancelledError:
                pass
            self.timeout_monitor_task = None
            logger.info("‚è∞ Edit timeout monitor stopped")

    async def timeout_monitor_loop(self):
        """Background loop for monitoring edit timeouts."""
        try:
            while True:
                await self.check_edit_timeouts()
                await asyncio.sleep(60)  # Check every minute
        except asyncio.CancelledError:
            logger.info("‚è∞ Timeout monitor loop cancelled")
        except Exception as e:
            logger.error(f"‚ùå Error in timeout monitor loop: {e}")

    async def check_editing_timeouts(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∞–π–º–∞—É—Ç—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"""
        try:
            while True:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

                current_time = time.time()
                pending_messages = self.moderation_queue.get_pending_messages()

                for message_id, message in pending_messages.items():
                    if message.editing_admin_id:
                        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç
                        if current_time - message.editing_started_at > 600:
                            # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                            admin_name = message.editing_admin_name
                            message.editing_admin_id = None
                            message.editing_admin_name = None
                            message.editing_started_at = None

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            self.moderation_queue._save_data()

                            logger.warning(f"‚è∞ Editing timeout expired for message {message_id} (admin: {admin_name})")

                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (–∫—Ä–æ–º–µ —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–∫–ª—é—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
                            for admin_id in Config.ADMIN_CHAT_IDS:
                                admin_id_int = int(admin_id)

                                # Skip if admin has disabled reminders
                                if admin_id_int in self.disabled_reminders:
                                    continue

                                try:
                                    await self.application.bot.send_message(
                                        chat_id=admin_id_int,
                                        text=f"‚è∞ –¢–∞–π–º–∞—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è @{admin_name}.\n–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ."
                                    )
                                except Exception as e:
                                    logger.error(f"Failed to notify admin {admin_id} about timeout: {e}")

                            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
                            await self.restore_buttons_for_all(message_id)

        except asyncio.CancelledError:
            logger.info("‚è∞ Editing timeout monitor cancelled")
        except Exception as e:
            logger.error(f"‚ùå Error in editing timeout monitor: {e}")

    async def restore_buttons_for_all(self, message_id: str):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞"""
        try:
            if message_id not in self.admin_messages:
                logger.warning(f"‚ö†Ô∏è No admin messages tracked for {message_id}")
                return

            admin_message_ids = self.admin_messages[message_id]
            keyboard = self.admin_handlers.create_moderation_keyboard(message_id)

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            message = self.moderation_queue.get_from_queue(message_id)
            if not message:
                logger.error(f"‚ùå Message {message_id} not found for button restoration")
                return

            moscow_time = get_moscow_time()
            username = message.username or "Unknown"
            chat_title = message.chat_title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            text_preview = message.original_message[:100] + "..." if len(message.original_message) > 100 else message.original_message
            ai_response_preview = message.ai_response[:100] + "..." if len(message.ai_response) > 100 else message.ai_response

            restored_message_text = (
                f"üÜî ID: {message_id}\n"
                f"üì± –ß–∞—Ç: {chat_title}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"‚è∞ –í—Ä–µ–º—è: {moscow_time}\n"
                f"üí¨ –í–æ–ø—Ä–æ—Å: {text_preview}\n"
                f"ü§ñ –û—Ç–≤–µ—Ç: {ai_response_preview}\n"
            )

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
            successful_updates = 0
            for admin_id, telegram_message_id in admin_message_ids.items():
                try:
                    await self.application.bot.edit_message_text(
                        chat_id=admin_id,
                        message_id=telegram_message_id,
                        text=restored_message_text,
                        reply_markup=keyboard
                    )
                    successful_updates += 1
                    logger.debug(f"‚úÖ Restored buttons for admin {admin_id}")
                except Exception as e:
                    logger.error(f"‚ùå Failed to restore buttons for admin {admin_id}: {e}")

            logger.info(f"‚úÖ Restored buttons for {successful_updates}/{len(admin_message_ids)} admins")

        except Exception as e:
            logger.error(f"‚ùå Error restoring buttons for all admins: {e}")

    async def update_all_admin_messages(self, message_id: str, action: str, admin_username: str):
        """
        Update all admin messages when one admin takes action.

        Args:
            message_id: Moderation message ID
            action: Action taken (send, reject, edit)
            admin_username: Username of admin who took action
        """
        try:
            if message_id not in self.admin_messages:
                logger.warning(f"‚ö†Ô∏è No admin messages tracked for {message_id}")
                logger.warning(f"üîç Current tracked messages: {list(self.admin_messages.keys())}")
                return

            admin_message_ids = self.admin_messages[message_id]
            logger.info(f"üîÑ Updating {len(admin_message_ids)} admin messages for {message_id}")
            logger.info(f"üéØ Admin IDs to update: {list(admin_message_ids.keys())}")

            # Create status text based on action
            if action == "send":
                status_text = f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º @{admin_username} {get_moscow_time()}"
            elif action == "reject":
                status_text = f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º @{admin_username} {get_moscow_time()}"
            elif action == "edit":
                status_text = f"üîí –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º @{admin_username} (–ò–ò-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)"
            elif action == "manual_edit":
                status_text = f"‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º @{admin_username} (—Ä—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)"
            else:
                status_text = f"‚ÑπÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–¥–º–∏–Ω–æ–º @{admin_username} {get_moscow_time()}"

            # Update all admin messages with individual error handling
            successful_updates = 0
            failed_updates = []

            for admin_id, telegram_message_id in admin_message_ids.items():
                try:
                    logger.debug(f"üîÑ Updating admin {admin_id}, telegram msg {telegram_message_id}")

                    # For all actions, remove buttons entirely
                    reply_markup = None

                    await self.application.bot.edit_message_text(
                        chat_id=admin_id,
                        message_id=telegram_message_id,
                        text=status_text,
                        reply_markup=reply_markup
                    )
                    successful_updates += 1
                    logger.debug(f"‚úÖ Successfully updated message for admin {admin_id}")

                except Exception as edit_error:
                    failed_updates.append(admin_id)
                    logger.error(f"‚ùå Failed to update message for admin {admin_id}: {edit_error}")
                    logger.error(f"‚ùå Admin ID type: {type(admin_id)}, Telegram msg ID: {telegram_message_id}")

            logger.info(f"‚úÖ Admin message update results: {successful_updates} successful, {len(failed_updates)} failed")
            if failed_updates:
                logger.error(f"‚ùå Failed admin IDs: {failed_updates}")

            # Only clean up tracking if we successfully updated at least one admin
            # Keep tracking for edit actions to allow restoration later
            if action in ["send", "reject"] and successful_updates > 0:
                # Delete actual messages from chat to avoid UI confusion
                await self.delete_admin_messages_from_chat(message_id)
                # Then clean up tracking data
                self.cleanup_admin_message(message_id)
            elif action in ["send", "reject"] and successful_updates == 0:
                logger.warning(f"‚ö†Ô∏è Keeping tracking data for {message_id} due to update failures")

        except Exception as e:
            logger.error(f"‚ùå Critical error updating admin messages: {e}")
            logger.error(f"‚ùå Error type: {type(e).__name__}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

    async def start(self):
        """Start the admin bot."""
        logger.info("üöÄ Starting Admin Bot...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()

        # Start editing timeout monitor
        self.editing_timeout_task = asyncio.create_task(self.check_editing_timeouts())
        logger.info("‚è∞ Editing timeout monitor started")

        # Send startup notification
        await self.notify_admin("–ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

        logger.info("üîß Admin Bot is running. Press Ctrl+C to stop.")

        try:
            # Keep the bot running
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è Received interrupt signal")
        finally:
            await self.stop()

    async def stop(self):
        """Stop the admin bot."""
        logger.info("‚èπÔ∏è Stopping admin bot...")

        # Stop editing timeout monitor
        if self.editing_timeout_task:
            self.editing_timeout_task.cancel()
            try:
                await self.editing_timeout_task
            except asyncio.CancelledError:
                pass
            logger.info("‚è∞ Editing timeout monitor stopped")

        # Send shutdown notification
        await self.notify_admin("–ê–¥–º–∏–Ω-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        await self.application.updater.stop()
        await self.application.stop()
        await self.application.shutdown()
        logger.info("üîß Admin bot stopped")

async def main():
    """Main function."""
    try:
        admin_bot = AdminBot()
        await admin_bot.start()
    except ValueError as e:
        logger.error(f"‚ùå Configuration error: {e}")
        logger.error("üí° Hint: Configure ADMIN_BOT_TOKEN and ADMIN_CHAT_IDS in .env file")
    except Exception as e:
        logger.error(f"‚ùå Unexpected admin bot error: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üîß Admin bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Fatal admin bot error: {e}")
        raise